#!/usr/bin/python3
"""FIFOCache clsss """
from collections import OrderedDict


BaseCaching = __import__('base_caching').BaseCaching


class LRUCache(BaseCaching):
    """ class inhirits Base cache """

    def __init__(self):
        super().__init__()
        self.cache_data = OrderedDict()

    def put(self, key, item):
        """ Add new data to the cache """
        if key is None or item is None:
            return
        
        if key in self.cache_data:
            # Move the existing key to the end to mark it as recently used
            self.cache_data.move_to_end(key)
        self.cache_data[key] = item
        
        if len(self.cache_data) > BaseCaching.MAX_ITEMS:
            # Remove the first item (the least recently used item)
            oldest_key = next(iter(self.cache_data))
            del self.cache_data[oldest_key]
            print(f"DISCARD: {oldest_key}")

    def get(self, key):
        """ Get data from the cache """
        if key in self.cache_data:
            # Move the accessed key to the end to mark it as recently used
            self.cache_data.move_to_end(key)
            return self.cache_data[key]
        return None
